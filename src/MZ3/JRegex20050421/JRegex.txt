.JRegex
JRegexはWindows用SJIS/UNICODE対応(*1)正規表現ライブラリです

選択、連結、繰り返し、数値一致、後方参照をサポート
基本的には最長マッチを基準にしバックトラッキングを行います

perlの正規表現を参考にしているが互換性は少ないです

正規表現の仕様を把握しておらず動作のみ真似て作られた粗悪品の拡張版です
DFA(決定性有限オートマトン *2)にも怪しいながら対応しています

  *1)  UCS-2対応ですが、これは処理系依存です
  *2)  実行時に決定性を求めるため、完全なDFAは作成しません

.基本表現

 abc               文字
 |                 選択
 ( ... )           集合
 [ ... ]           文字クラス


.繰り返し
..最長一致繰り返し

 *                 0回以上繰り返す
 +                 1回以上繰り返す
 ?                 1回または1回あらわれる
 {n,m}             n回以上、m回以下繰り返す
 {n,}              n回以上繰り返す
 {n}               n回繰り返す

  直前のパターンの最も長い繰り返しを優先してマッチします

..最短一致繰り返し

 *?
 +?
 ??
 {n,m}?
 {n,}?
 {n}?

  直前のパターンの最も短い繰り返しを優先してマッチします

..限定一致繰り返し

 *+
 ++
 ?+
 {n,m}+
 {n,}+
 {n}+

  直前のパターンの最も長い繰り返しにのみマッチします

.文字クラス
..文字クラス式

 [...]             集合
 [^...]            否定集合
 [a-z]             範囲           (aからzまで)

  例)  [a-C]       範囲を用いる場合、その範囲内の文字がマッチする
       [a-あ]      2バイト文字をまたぐ事も可能
       [a-@]       記号を利用することも可能
       [\x1F-A]    メタ文字でも、特定の文字のみを指すメタ文字は可能

       [\w-A]      範囲の両端は文字でなければならないため許されない

       [あ-お]     全角文字の範囲を取る場合注意する必要があります
                   SJISで表すなら 0x82a0 から 0x82a8 までが対象になりますが
                   その範囲内には `あぃいぅうぇえぉお' の文字が含まれます

       [一-九]     恐らく想定した結果とまったく違う結果となります
                   SJISで表すと 0x88ea から 0x8be3 までが対象になり
                   約500種類の全角文字にマッチします

..名前付文字クラス

 [:xxx:]           名前付集合
 [:^xxx:]          否定名前付集合

  alnum            英数字
  alpha            英字
  ascii            ASCII文字
  cntrl            制御文字
  xdigit           16進数字
  digit            10進数字
  graph            空白以外の印字可能な文字
  print            印字可能な文字
  punct            区切り文字
  space            空白文字
  upper            大文字
  lower            小文字

上記までがWinSDK/C言語のtchar.hで定義される_istxxxを利用して判断しています
ロケールが考慮されます
JRegexではロケールを設定しませんので実行前に設定しておく必要があります


  blank            空白           ([ \t])
  kana             半角ｶﾅ         ([｡-ﾟ])
  mbalpha          全角英字       ([ａ-ｚＡ-Ｚ])
  mbdigit          全角数字       ([０-９])
  mbspace          全角空白文字   ([　])
  mbupper          全角大文字     ([Ａ-Ｚ])
  mblower          全角小文字     ([ａ-ｚ])
  mbhira           ひらがな       ([ぁ-ん])
  mbkata           カタカナ       ([ァ-ヶ])
  mbgreece         ギリシャ文字   ([Α-ω])
  mbrussia         ロシア文字     ([а-яА-Я])
  mbrusupper       ロシア大文字   ([А-Я])
  mbruslower       ロシア小文字   ([а-я])
  mbstr            全角文字

上記までが独自実装されています
ロケールは考慮されません

  実際に使用される場合は [[:alnum:]] と記述をします
  他の文字クラスと組み合わせる場合 [abc[:^blank:][:digit:]xyz] などとします

.メタキャラクタ
..エスケープ文字

 \t                水平タブ       (0x09)
 \v                垂直タブ       (0x0B)
 \n                改行           (0x0A *1)
 \r                復帰           (0x0D)
 \f                改頁           (0x0C)
 \a                ベル           (0x07)
 \e                Esc            (0x1B)

 \b                後退           (0x08)
                    * 文字クラス式内でのみ有効

 \N                改行           (\r\n \r \n のいずれか)

  *1)  正規表現コンパイルオプションで JREG_BINARYMODE が指定されなかった場合
       \n は \N と同等の意味を持ちます
       ただし、文字クラス式で用いられたとき \n は 0x0A のみを指します

..文字

 .                 任意文字       ([^\r\n\x00] *1)
 \d                数字           ([0-9])
 \D                非数字         ([^0-9])
 \w                単語構成文字   ([0-9a-zA-Z_])
 \W                非単語構成文字 ([^0-9a-zA-Z_])
 \s                空白文字       ([ \t\v\n\r\f])
 \S                非空白文字     ([^ \t\v\n\r\f])

 \k                マルチバイト文字 (*2)
 \K                非マルチバイト文字

  *1)  正規表現コンパイルオプションにて JREG_BINARYMODE が指定された場合
       . は改行を文字と認めます ([^\x00] と解釈されます)

  *2)  SJIS版では2バイト文字を指します
       UNICODE版では浅学のため、ASCII文字か半角ｶﾅ以外と指定しています
       文字コードで言えば 0x0100〜0xFF5E を \k の範囲としています
       もし適切な指定の方法、資料などご存知でしたら御教授ください

..特殊
...文字表現

 \onnnnnn          8進数文字
 \0nnnnnn          8進数文字
 \xHHHH            16進数文字
 \cx               制御文字
 \C-x              制御文字

  例)  \x82\xa0    SJIS全角ひらがなの `あ' を表したい場合失敗します
                   JRegexは全角を1文字として扱う為です

       \x82a0      `あ' を表したい場合このようにしなくてはなりません
                   しかしUNICODEとは文字コードが違う為別の問題が起こります

       \x3042      UNICODEでの `あ' はこのように表します

...アンカー

アンカーは文字クラス式内では利用できません

 ^                 行頭           (バッファ先頭、複数行指定時は改行の直後 *1)
 $                 行末           (バッファ末尾、複数行指定時は改行の直前 *2)
 \b                英単語境界     (\w と \W または \W と \w の境界)
 \B                非英単語境界   (\w と \W または \W と \w の境界以外)
 \j                全角単語境界
 \J                非全角単語境界
 \A                バッファ先頭
 \z                バッファ末尾
 \Z                バッファ末尾、または改行文字の直前
 \<                文字列先頭     (\W と \w の境界)
 \>                文字列末尾     (\w と \W の境界)

  例)    \j \J       単語構成文字(\w)、ひらがな、カタカナ、半角ｶﾅ
                     マルチバイト文字など種類の異なるものの境界にマッチします

  *1)  正規表現コンパイルオプションにて JREG_STARTLINE が指定された場合
       \r や \n の直後が行頭になります
       しかし、JREG_BINARYMODE が指定されなかった場合
       \r\n の \r の直後や、改行直後に文字列が終了する場合行頭としません

  *2)  正規表現コンパイルオプションにて JREG_ENDLINE が指定された場合
       \r や \n の直前が行末になります
       しかし、JREG_BINARYMODE が指定されなかった場合
       \r\n の \n の直前や、改行直後に文字列が終了する場合行末としません

.後方参照

 \nnn              以前マッチした集合 (n >= 1)
                    *) 先頭が0の時は8進数文字とみなされます

.拡張正規表現

 (?: ... )         後方参照を作らない集合
 (?= ... )         先読み
 (?! ... )         先読み否定
 (?<= ... )        戻り読み
 (?<! ... )        戻り読み否定

  戻り読みは繰り返し、選択、後方参照を用いることができません
  ただし n{3} といった繰り返し数が固定の繰り返し表現は利用できます
  また、(?<=ab|cd) といったマッチ文字数が同じ選択表現であれば利用できます
  文字数さえ同じであれば (?<=あ|a) といったことも可能です

  メタ文字の \N も実行時のマッチのマッチ幅が不定のため利用できません
  これは互換性保持のため強制的に \n(0x0A) に置き換えられます

.置き換え

`$' で始まる置き換え文字を検索パターンに使用することはできません

 $&                パターンにマッチした文字列
 $`                パターンにマッチした部分の前側の文字列
 $'                パターンにマッチした部分の後側の文字列
 $+                パターンの最後のカッコに対応する文字列
 $nnn              以前マッチした集合 (n >= 1)
 \nnn              以前マッチした集合 (n >= 1)
                    *) 先頭が0の時は8進数文字とみなされます

  その他 メタキャラクタ-特殊-文字表現 で挙げたメタ文字が利用可能です

.コンパイル方法
Microsoft Visual C++6.0があればそれでビルドしてください
SJIS/UNICODEに対応できます

GCC(MingW)でもコンパイルできます
Makefileがあるのでそちらを参照してください
ただしgccがソース中の文字列をUNICODEに変換できないため(?)か
UNICODE版は意図したとおり動きません、SJIS版のみ利用できます

EUC/UTF-8などへの対応予定はありません

正規表現のチェックの為に regtest.c を同梱しています

.オプション
..正規表現コンパイルオプション

 JREG_NONE          オプション指定なし
 JREG_BINARYMODE    バイナリモードで実行する
 JREG_STARTLINE     改行直後を先頭として扱う
 JREG_ENDLINE       改行直後を先頭として扱う
 JREG_MULTILINE     複数行を扱う
 JREG_DFA           DFAとして正規表現を行う

  JREG_BINARYMODE を指定した場合いくつかの独自拡張を無効にします

  JREG_DFA を指定した場合通常の正規表現と違い大きく動作を制限されます
  後方参照、最短一致、限定一致のいずれかが使用された場合
  自動的に JREG_DFA は無効になります

..実行時オプション

 JREG_NONE          オプション指定なし
 JREG_ICASE         大文字小文字無視
 JREG_SINGLESTEP    複数位置での検索/置き換えをしない
 JREG_STRINGFUNC    文字列をコールバック関数から取得
 JREG_USELASTRET    前回の検索結果を使用
 JREG_NORMAL        デフォルトのオプションを指定 (大文字小文字無視のみ)

  JREG_SINGLESTEP はperlのgオプションとは異なります

.使用上の注意

SJISはコードページ932に依存します
UNICODEはUCS-2限定です (1ワードは2バイト限定でありサロゲートペアは扱えません)
ただし、これはワイドキャラクタをUNICODE(UCS-2)へとコンパイラが扱う場合のみです
処理系依存になります (MS-VC可、GCC不可)

SJIS、UNICODEの両方を同時に扱えるわけではありません
コンパイル時に UNICODE/_UNICODE を宣言することで切り替わります

.perlとの相違点

perlの動作のみを唯一の仕様としている為ほぼ同じ表現が利用できます
ただソースは見たことないので細かい部分が違うかもしれません
pcreを名乗れるほどではありません

perlにあるけどJRegexにないもの

 []abc]                この書き方が嫌い
 (?# ... )             使ったことないし
 (?imsx-imsx: ... )    やっぱ使ったことないし
 (?imsx-imsx)          同上
 (?> ... )             何に使えるの?
 (?{ ... })            Cでevalできたら考える
 (?( ... )yes|no)      同上
 \G                    どう使うの?
 後方参照がないとき NFA->DFA を自動でやっている気がするところ

perlにあるけどJRegexになくて対応予定のもの

 \l                    直後のキャラクターを小文字にします
 \u                    直後のキャラクターを大文字にします
 \L                    \E に至るまで小文字にします
 \U                    \E に至るまで大文字にします
 \Q                    \E に至るまで 正規表現演算子をクォートします
 \E                    \L \U \Q の終端になる
 \L{ ... }             こっちのほうが分かりやすいとは思うがな
 \U{ ... }
 \Q{ ... }
 \&n                   n番目の後方参照の位置にある表現を手続きとする
                       m/\([^()]*\&0?*\)/ とかかな
                       backref構造体にノードポインタ追加、ループ回数に注意

JRegexの独自拡張

 *+ ++ ?+ {n,m}+       限定一致
 \j \J                 全角単語境界
 \N                    (\r\n|\r|\n) と同義
 [[:mbxxx:]]           名前付き文字クラス項参照

.連絡先

(全略)
zxcvbn@deneb.freemail.ne.jp

ソースへの質問、感想などがあればこちらまで
ソースが汚い、処理がいいかげんなどの苦情は受け付けません
ただしパッチは大歓迎です

..ライセンス

JRegexは修正BSDスタイルのライセンスで配布します
詳しくはLICENSEを参照してください

# GNU/regex、Boost/Regex++、Ruby/onigurumaなどを使う事をお勧めします

.謝辞

作成に当たって以下の書籍、プログラムを参考にさせて頂きました
敬称略、順不同

ActivePerl - ActiveState Corporation
http://www.activestate.com/
 動作の基準はActivePerlです^^;

CGI&Perl ポケットリファレンス - 技術評論社
 基本動作はコイツを見て組み上げました

正規表現メモ - 木村浩一
http://www.kt.rim.or.jp/~kbk/regex/regex.html
 各演算子の説明があるおかげでずいぶん助かりました

oniguruma - 小迫
 testc.cやdoc/RE.jaが大変参考になりました

コンパイラ 原理・技法・ツール(1) - Aho, Sethi, Ullman 他
 DFA構成法の参考に、書いてあることの半分も理解してないけど ;_;
