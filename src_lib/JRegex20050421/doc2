.まとめ
JRegex構成のためメモ用にまとめた文章

..JRegexの弱点
次のような正規表現では一般の処理系と比べ遅い

  m/[abcdefghijklmnopqrstuvwxyz]/
    JRegexは文字クラス内の情報をテーブル展開せずに文字列として持ち
    マッチングの際に毎回走査して判断するため、長くなればなるほど遅くなる
    m/[a-z]/ では1回の範囲で判断されるため早くなる
    同機能のメタ文字があればそちらを利用するほうがよい
    なおDFAでも文字クラスは毎回走査してるので解決にはならない

  m/[aaaaaaaaaaaaaaaaaaaaaaaaab]/
    連続するaが全くの無駄だがJRegexでは文字クラス内が最適化されないため
    入力文字がbであっても全てのaと毎回比較される
    こんな正規表現書くヤツいないだろ、と言うことで無視している
      (メタ文字をうまく組み合わせれば不本意な正規表現も作り出せるが、無視)

  m/(a|a|a|a|a|a)b/ to DFA
    DFAでは普通このような冗長な表現は最適化されるがJRegexのDFAではならない
    JRegexのDFAでは到達位置の決定性を遷移する可能性のある全ての状態と比較し
    決定性を求めるためこのような表現は選択の回数分無駄な処理が発生する
    つか、こんな表現を書くな! (migemoでもこんなのつくらねーだろ)

  m/a+?/
    一般的に正規表現の繰り返し表現は1回につき1つのスタックを消費する
    しかし、最短一致や限定一致はスタックを消費する必要がない
      (最長一致も部分的な決定性が証明できればスタックを消費する必要はないが)
    にもかかわらずJRegexではスタックが消費され、スタックオーバーフローを起こしやすい
    限定一致は全ての一致が判断されると次の遷移に入る前にスタックが戻るのでまだマシ
      (2004/07/27 最短一致はループ毎にスタックを消費しないよう修正)

  s///
    置き換えは置き換え後の文字列を与えられたバッファに書き込む
    ただし置き換え後の文字数は不定であるため次のようなコードを書く
      1 if(!jreg_replace(reg, rep, ...)) {return false;}
      2 rep.repbuf = malloc(sizeof(t_code) * (rep.bufsize + 1));
      3 jreg_replace(reg, rep, ...);
    1で一度正規表現を走らせ、2で正規表現置き換え後のサイズを取得しmalloc
    3でもう一度正規表現を走らせる
    つまり1と3が同じ処理にもかかわらず2度書く必要がある
    決めうちである程度のバッファを渡すと最悪バッファオーバーフローを起こす
    バッファ長の指定はしていない、対応は次のどれか
      1. jreg_replaceでmallocしてやる、解放用の関数を追加しなきゃならないが
      2. repにmaxsizeを追加する
        1 t_code str[1024];
        2 rep.repbuf = str;
        3 rep.maxbuf = lengthof(str);
        4 if(!jreg_replace(reg, rep, ...)) {return false;}
        5 if(rep.maxbuf >= rep.bufsize) {return true;}
        6 rep.repbuf = malloc(sizeof(t_code) * (rep.bufsize + 1));
        7 rep.maxbuf = rep.bufsize;
        8 jreg_replace(reg, rep, ...);
      3. gオプションをなくし以前のマッチ結果を使って再構築させる
        (2004/08/05 gオプション相当はなくした、再構築フラグは保留)

JRegexではテーブル展開や最適化、決定性の判断などあらゆる事を行わない

..NFA
JRegexでは正規表現をリンクリストにより表す内部表現へコンパイルする

(a|b)*aab という正規表現に対しよく解説書とかに載ってるノード図
     e┌───────┐
      │e    a    e   │
      ↓┌[2]→[3]┐  │ a    a    b
[0]─[1]┤        ├→[6]→[7]→[8]→[9]
      │└[4]→[5]┘  ↑
      │e    b    e   │
      └───────┘e
  *) e はε遷移

ε遷移や1個のノードから複数の状態へ遷移できるのが内部的に表現しづらいため
以下のような規則を用いてノード化する

1. ノードが文字、メタ文字、文字クラスなどのいずれか1つを表す (* Aノードとする)
2. ノードの内容にマッチすれば次の遷移へ移る、遷移先は1つしかない
3. 繰り返しと集合はそれ自体をノードとして扱う、ε遷移はない
4. 繰り返しは繰り返す内容(ノードの集合)と繰り返し回数をもつ (* Cノードとする)
5. 集合はその内容自体として2つのノード集合をもつ (* Uノードとする)
6. 集合に1つ以上の選択がある場合 (a|b|c) は (a|(b|(c))) とすればよい
7. 正規表現は全体が括弧でくくられたものとして扱う (| を例外なく表すため)
Aノード [A:abc] - [A:\w]   abc\w
Cノード [C:1-10]           \w{1,10}
           +- [A:\w]
Uノード [U:]               (def|ghi)
           +- [A:def]
           +- [U:]
                 +- [A:ghi]

(a|b)*aab という正規表現に対してJRegexががんばって表したノード図
[U:]
  +- [C:0-*] ------- [A:aab]
       +- [U:]
            +- [A:a]
            +- [U:]
                 +- [A:b]

このノード図を走査するとき
1. 現在のノードにマッチすれば次のノードに移る
   Cノードはループカウントをクリアする
     ただし最短一致で最低繰り返し数0なら先に次のノードを試みる
     限定一致ならループを限界まで繰り返させ次のノードを試みる
   Uノードはまず1つ目のノード集合にマッチを試みる、アンマッチなら2つ目へ

2. 次のノードがなくなれば親の次のノードに移る (なければさらに親へと)
   親がCノードで、かつループ回数が規定以下ならカウントアップさせる
     マッチ幅が0なら次のノードを試みる (ループ完了とみなす)
     最長一致でループ回数が規定回数以下ならループさせる
     最短一致でループ回数が規定回数以下ならループさせ、そうでなければマッチ幅を返す
     限定一致ならループを限界まで繰り返させ次のノードを試みる
   親がUノードで、かつ後方参照を用いる場合マッチ幅を記録させる
     次のノードがアンマッチならマッチ幅を戻す

それでいて各所に例外条項がザックザックと、、、ややこしい (>_<;


..DFA
(a|b)*aab という正規表現に対し本来DFAが作るテーブル (前述NFA図からまとめたもの)

        | a     | b
--------+-------+-------
0 start | 3,7   | 5
3,7     | 3,7,8 | 5
5       | 3,7   | 5
3,7,8   | 3,7,8 | 5,9
5,9 end | 3,7   | 5
  *) 縦に状態番号、横に入力文字、交差する場所は遷移先状態番号
     startから始まり最も最後にendに達した位置を覚えておきそれを最長マッチとする

この方法では状態数と入力文字種によって表がでかくなりすぎる可能性がある

なおJRegexではテーブルを作ってはいるが、これはDFAではない
後戻りしないNFAと言うべきか(?)、効率のよいDFAを思いつくまでとりあえず
(a|b)*aab という正規表現に対しJRegexが作る表
 1 2  345 正規表現の各文字に対してまず一連の番号を振り状態番号とする

        |
--------+-------
start   | 1 2 3
1       | 1 2 3
2       | 1 2 3
3       | 4
4       | 5
5       | end
  *) 縦にあらかじめ振った一連の番号、右はその番号に対する遷移可能性一覧
     startから始まり最も最後にendに達した位置を覚えておきそれを最長マッチとする

入力文字が "abaaabb" の場合、JRegexでは
  startは 1,2,3 に遷移できる可能性があるので入力文字 'a' と 1,2,3 を比較する
  1 と 3 がマッチしているので現在の位置を 1,3 とする
  
  1,3 を統合した結果 1,2,3,4 に遷移できる可能性があるので入力文字 'b' と 1,2,3,4 を比較する
  2 にマッチしているので現在の位置を 2 とする
  
  2 は 1,2,3 に遷移できる可能性があるので入力文字 'a' と 1,2,3 を比較する
  1 と 3 がマッチしているので現在の位置を 1,3 とする
  
  1,3 を統合した結果 1,2,3,4 に遷移できる可能性があるので入力文字 'a' と 1,2,3,4 を比較する
  1 と 3 と 4 にマッチしているので現在の位置を 1,3,4 とする
  
  1,3,4 を統合した結果 1,2,3,4,5 に遷移できる可能性があるので入力文字 'a' と 1,2,3,4,5 を比較する
  1 と 3 と 4 にマッチしているので現在の位置を 1,3,4 とする
  
  1,3,4 を統合した結果 1,2,3,4,5 に遷移できる可能性があるので入力文字 'b' と 1,2,3,4,5 を比較する
  2 と 5 にマッチしているので現在の位置を 2,5 とする
  5 は 終了状態なので、7文字目が終了状態に達したことを記録しておく
  
  2,5 を統合した結果 1,2,3 に遷移できる可能性があるので入力文字 'b' と 1,2,3 を比較する
  2 にマッチしているので現在の位置を 2 とする
  
  文字列の終端に達したため最後に終了状態に達した文字位置、7を結果として返す
この様に非常に無駄の多い処理になる代わり、用意する表はNFA状態数と同数ですむ
もう少し工夫すれば効率も上がるのかもしれないが、JRegexでは *一切頑張っていない*

本来どおりDFA表を作成すれば
 表の大きさは O(N^2) 状態数の2乗 (ただしこんなのはよっぽどじゃないとならない)
 処理時間は   O(M)   対象文字列の文字数に比例
JRegexの表では
 表の大きさは O(N)   状態数と同数
 処理時間は   O(M*N) になる (これも中々ならないが、DFA表の N^2 より比較的陥りやすい)

最大の利点はDFA表の美しい処理と違って
元々非常に非効率で泥臭いため多少適当に手を加えても心が痛まない
その結果、安易に先読み、戻り読み機能を追加することができた ;-)

..NFA決定性の判断
 *この機能は未実装、案のみ*

分岐する箇所でのみ決定性の有無をとればDFAになる
これを部分的に最適化のため行う

  m/(a*)a/
  これは従来の方法で処理を行う

  m/(a*)b/
  \1のマッチが確定した時点で次の入力文字cを判断し

my(c) = getchar;
if(node.nexttbl(c), #次の入力に対しての完全性(?)があるか (*1)
{#cはnext遷移に含まれる可能性がある
	scan_node(node.data.Closure.closure);
	scan_node(node.next);
},
{
	node = node.data.Closure.closure;
	goto _first;
});

  (*1) 検査のためのコストとして、コンパイル時点で到達可能性のあるノードを列挙
       (p1|p2|p3)*(s1|s2) の場合p1,p2,p3のいずれかのみに属する入力であれば
       DFAで使った到達可能性列挙関数を部分的に使ってもよい?

..その他
...cl(MS-VC)の出すワーニング
以下の警告は /W4 でコンパイルしたときのみ出る

例えば
  while(1) { ... } //条件式が定数です、との警告 (*1)
  switch(n)
  {
  case 1:  hogehoge(); return(10);
  case 2:  fugafuga(); return(15);
  default: hogehoge(); return(20);
  }
  return(-1); //実行されないステートメントです、との警告 (*2)
このようなコードで、コメントにあるような警告が出ます
(*1)は基本的に無視、無限ループどうかけっつーんだよ (-_-ﾒ
(*2)は確かに無駄だけど、主に何も処理されなかったときのエラーコードを記述
    現状エラーにはなりようがないが、エラーコード等を明示したいときに書いている

...gcc(MingW)の出すワーニング
一部API.txt に転記

....gccメモ
自戒のため記述
次のコードで不具合が出る (まんまコピペ)

100 if(!jreg_node_copy(node->Data.Closure.closure, prnext)) {return(false);}
110 (*prnext)->next = node; //! 繰り返しの要素は単項であるため次要素に繋げることが可能
120 node->Data.Closure.lower--;
130 if(node->Data.Closure.upper != JREG_REPEAT_INFINITE) {node->Data.Closure.upper--;}
140 return(jreg_node_split(*prnext, cnt, prnext));

110行目のコメントの最後の文字 `能' が '\x94\x5c' つまりエスケープ記号
gccにSJISパッチやをあてるかとかしてなかった環境の問題 (._.` 2時間悩んだよ、、、)
結論 `表' だけじゃなくて `能' にも気をつけましょう

.DFAレシピ
NFAの遷移テーブルからDFAテーブルを作る方法
  (JRegexにそのまま使用しているわけではありません >_<;)

(a|b)*aab まずNFA図を作る
 1 2  345 正規表現の各文字に対してまず一連の番号を振り状態番号とする

        | a     | b     | $
--------+-------+-------+-------
start   | 1,3   | 2     | -
1       | 1,3   | 2     | -
2       | 1,3   | 2     | -
3       | 4     | -     | -
4       | 5     | -     | -
5       | -     | end   | -
  縦に状態、横に入力文字 ($ は a,b以外の入力)
  現在位置が2の時に入力文字 bがあれば、現在位置を2へ移動する、という具合
  これは正規表現をパースしてがんばって作る

この時 1,3とかいうのは具合が悪い
DFAとはある状態から入力文字に対して一意な遷移先を求めれなければならない
ではどうするか、1もしくは3なんて曖昧な事を言っているからいけないので
本当に「1,3」という名前の状態を作ってあげればいい

        | a     | b     | $
--------+-------+-------+-------
start   | 1,3   | 2     | -
1       | 1,3   | 2     | -
2       | 1,3   | 2     | -
3       | 4     | -     | -
4       | 5     | -     | -
5       | -     | end   | -
1,3     | 1,3,4 | 2     | -
  この時「1,3」は1と3の状態を混ぜ合わせたものにする

ここで新たに 1,3,4なんてのが出来てしまった
もちろん前回どおり「1,3,4」も捏造してしまえばよい
そうすると「1,3,4」から 1,3,4,5なんてのができるのでこれも捏造

        | a       | b     | $
--------+---------+-------+-------
start   | 1,3     | 2     | -
1       | 1,3     | 2     | -
2       | 1,3     | 2     | -
3       | 4       | -     | -
4       | 5       | -     | -
5       | -       | end   | -
1,3     | 1,3,4   | 2     | -
1,3,4   | 1,3,4,5 | 2     | -
1,3,4,5 | 1,3,4,5 | 2 end | -

この時「1,3,4,5」に 2 endとなっているが endは
ここまでくれば終わりですよって言うマークなのでそのままでいい
このままでは著しく見にくいので新しく番号を振りなおす

        | a     | b     | $
--------+-------+-------+-------
start   | 6     | 2     | -
1       | 6     | 2     | -
2       | 6     | 2     | -
3       | 4     | -     | -
4       | 5     | -     | -
5       | -     | end   | -
6       | 7     | 2     | -
7       | 8     | 2     | -
8       | 8     | 2 end | -

ここでは 1,3,4,5へはstartからどう辿っても行き着けない
よって無駄なので消えてもらう

        | a     | b     | $
--------+-------+-------+-------
start   | 6     | 2     | -
2       | 6     | 2     | -
6       | 7     | 2     | -
7       | 8     | 2     | -
8       | 8     | 2 end | -

ハイ、DFAテーブルの出来上がり (^-^v
DFAは便利なことに繰り返しもその表の中に押し込めてしまっている

aababaaaabaaabaaaabaaabaadf こんな入力があった場合
6726267882678267882678267-  こんな遷移をし
         e   e    e   e     eはendの所を通り過ぎたよって事
                            最後にeが出たところを見ればマッチの終端になる

  最初にeが出てきたときに打ち切れば最短一致
  入力を可能な限りし続け最後にeが出てきた場所なら最長一致になる

部分集合構成法はまっとうに理解できてないのでパス、こっちなら簡単かな?
  (実はNFA図を作るのが一苦労なんだけど >_<;)

JRegexではこの状態を混ぜ合わせ捏造、の部分を最初に一気にやらずに
毎回その状態番号に達したときに作り直している

  * 付属のソース regdump.cをコンパイルすればノードテーブルを簡易な表に視覚化できる

.パーサのススメ
正規表現の文字列から内部表現に変換する場合多大な労力が必要になる
グリコ50粒は余裕で消費できる
ただ、ある程度限定された構文を持つのでいくらかは楽できる

1. 正規表現は木構造で表せる (perl拡張は除く)のでそのお勉強はしておくこと
   集合、繰り返しを表すためその処理が必要になる、必須
     (ただし、逆に言えば集合、繰り返し以外は木構造である必要がない)

2. 繰り返し回数をどう扱うかも決めておいたほうがいいかもしれない
     a{3,5}b を aaa((a)?a)?b へと内部的に変換する場合かなりややこしくなる
     a{3,5}b を aaa(aa|a|)b  NFAの最左選択であればこれでもいい

3. また最短一致を扱うのかも重要になる
   なぜなら最短一致は等価な最長一致の正規表現に変換するとやたら長くなる
     a{3,5}?b なら aaa(|a|aa)b NFAの最左選択でない場合は不可能 (だったっけ?)

4. 拡張正規表現は等価な正規表現を作れない (実行時の処理が必要になる)

例えばJRegexではパーサ時に作るのはあきらめ全て実行時に判断している
JRegexのパーサ部分は NFA項で説明したような構造をしている
繰り返しは 繰り返し回数をきめるだけ       (2の部分)
           最短一致ならフラグを立てるだけ (3の部分)
拡張正規表現も フラグを立てるだけ         (4の部分)

.参考資料
今後読んでおきたいもの

http://www.unicode.org/unicode/reports/tr18/
UCS-2対応なJRegexは一番レベルの低い 1になる
基本UNICODEサポート、、、かとおもいきやプロパティと文字クラスの対応が
# UNICODEのみの対応はSJIS版でどうつける?

ms-help://MS.MSDNQTR.2003FEB.1041/cpgenref/html/cpconregularexpressionslanguageelements.htm
そういえばUNICODE対応だっけ、コレ \p{xxx}

perlは5.8以降UTF-8対応で \p{xxx} できるらしい
\uxxx は前からできたっけ?

http://www.geocities.jp/kosako1/oniguruma/index.html
その対応文字コード数、なんだそれは -.-)
